<?php/** * Description of StudentsController * * @author Alastair */class StudentsController extends AppController{        var $layout = 'admin';        public function beforeFilter() {         parent::beforeFilter();    }        public function admin_add(){            // If request data is not empty, save data and send message        if(!empty($this->request->data)){                    /* Validate Student POSTed data. If it doesn't validate, set a             * Session Message and show form with higlighted errors. First,             * we shall use the custom-made isUniqueId function to check if the             * user already exists in database. if not, go add!             */            if($this->Student->isUniqueId($this->request->data['Student']['id'])){                 /* Explode pp_schedule string input into an array. Trim each class,                  * which is delimited by a comma, so that whitespace is removed.                  * Add cleaned strings to pp_classes array, serialize, and store in                  * database.                  */               $this->request->data['Student']['pp_schedule'] = $this->turnTextToArray($this->request->data['Student']['pp_schedule']);                                  if($this->Student->saveAll($this->request->data)){                    unset($this->request->data);                    $this->Session->setFlash('New Student has been added!', 'default', array('class' => 'success'));                }else{                    $this->request->data['Student']['pp_schedule'] = $this->turnArrayToText($this->request->data['Student']['pp_schedule']);                    $this->Session->setFlash('Cannot validate. Check errors below.', 'default', array('class' => 'error'));                }            }else{                $this->Session->setFlash('A student with the same Panther ID already exists.', 'default', array('class' => 'error'));            }        }            }          public function admin_addBulk(){        $file = $this->request->data['Student']['file']['tmp_name'];        $file_type = $this->request->data['Student']['file_type'];        $readCSVdata = $this->Student->readCsvData($file, $file_type, 'pp_schedule');                       if(!isset($file)){            $this->Session->setFlash("No file uploaded.", 'default', array('class' => 'error'));            return $this->redirect(array('controller' => 'students', 'action' => 'add'));        }                if(!isset($file_type)){            $this->Session->setFlash("No specified CSV file type given.", 'default', array('class' => 'error'));            return $this->redirect(array('controller' => 'students', 'action' => 'add'));        }              if(!$readCSVdata){            $this->Session->setFlash("Something went wrong with the request.", 'default', array('class' => 'error'));            return $this->redirect(array('controller' => 'students', 'action' => 'add'));        }                if($this->Student->saveAll($readCSVdata)){            $this->Session->setFlash("Mass Add has been processed succesfully!", 'default', array('class' => 'success'));            return $this->redirect(array('controller' => 'students', 'action' => 'add'));        }else{            $inputErrors = $this->Course->csvErrorsAsString();             $this->Session->setFlash("Something went wrong with the request.  CSV data inputs are invalid. $inputErrors", 'default', array('class' => 'error'));            return $this->redirect(array('controller' => 'courses', 'action' => 'add'));        }            }       public function admin_search(){               if(!empty($this->request->query['search'])){            $searchString = $this->request->query['search'];            if(is_numeric($searchString)){                $student_results = $this->Student->findAllById($searchString);            }else{                $student_results = $this->Student->multiColumnSearch($searchString, 'first_name', 'last_name');            }            $this->set('students', $student_results);        }    }        public function admin_edit($id = NULL){          if(empty($id)){            $this->Session->setFlash("No ID was provided to view/edit!", "default", array(                'class' => 'error'            ));        }                if($this->Student->findById($id)){			// Get information about that student			$student_result = $this->Student->findById($id);            if(!$this->request->data){                $this->request->data = $student_result; // Put student information on form that will show up                $this->request->data['Student']['pp_schedule'] = $this->turnArrayToText($student_result['Student']['pp_schedule']);				$this->request->data['Student']['f_schedule'] = $this->turnArrayToText($student_result['Student']['f_schedule'], ", ", true);            }else{				// Check if previous f_schedule is the same as new f_schedule. If not, check which class is newly added, and check which class is removed				if($student_result['Student']['f_schedule'] != $this->turnTextToArray($this->request->data['Student']['f_schedule'], ", ", true)){					$new_schedule = unserialize($this->turnTextToArray($this->request->data['Student']['f_schedule'], ", ", true));					$old_schedule = unserialize($student_result['Student']['f_schedule']);					// Go through each new class					foreach($new_schedule as $new_class_catalog=>$new_class_section){						// New and old f_schedule has the same catalog, but different class!						if($new_schedule[$new_class_catalog] != $old_schedule[$new_class_catalog]){							$this->loadModel("Course");							// There is a section for that catalog in new schedule - Increment							if(!empty($new_schedule[$new_class_catalog])){								$this->Course->updateAll(									array('Course.oc_capacity' => 'Course.oc_capacity + 1'),									array('Course.catalog' => $new_class_catalog, 'Course.section' => $new_schedule[$new_class_catalog])								);							}							// There is a section for that catalog in old schedule - Decrement							if(!empty($old_schedule[$new_class_catalog])){								$this->Course->updateAll(									array('Course.oc_capacity' => 'Course.oc_capacity - 1'),									array('Course.catalog' => $new_class_catalog, 'Course.section' => $old_schedule[$new_class_catalog])								);							}						}						// If same catalog and section, do not do anything!					}					// Go through each old class - this handles if a catalog is removed from a schedule					foreach($old_schedule as $old_class_catalog=>$old_class_section){						// New and old f_schedule has the same catalog, but different class!						if($new_schedule[$new_class_catalog] != $old_schedule[$new_class_catalog]){							$this->loadModel("Course");							// That catalog does not have a section or does not exist in new schedule							if(empty($new_schedule[$old_class_catalog]) || !array_key_exists($old_class_catalog, $new_schedule)){								$this->Course->updateAll(									array('Course.oc_capacity' => 'Course.oc_capacity + 1'),									array('Course.catalog' => $old_class_catalog, 'Course.section' => $new_schedule[$old_class_catalog])								);							}						}					}				}                /* Explode pp_schedule string input into an array. Trim each class,                  * which is delimited by a comma, so that whitespace is removed.                  * Add cleaned strings to pp_classes array, serialize, and store in                  * database.                  */               $this->request->data['Student']['pp_schedule'] = $this->turnTextToArray($this->request->data['Student']['pp_schedule']);			   $this->request->data['Student']['f_schedule'] = $this->turnTextToArray($this->request->data['Student']['f_schedule'], ", ", true);				                if($this->Student->saveAll($this->request->data)){                    $this->Session->setFlash('Student edit has been saved.', 'default', array('class' => 'success'));                    return $this->redirect(array('controller' => 'students', 'action' => 'search'));                }else{                    $this->Session->setFlash('Cannot validate. Check errors below.', 'default', array('class' => 'error'));                }            }        }            }        public function login(){                $this->layout = "student_login";        if($this->request->is('post')){            if($this->Auth->login()){                $this->Session->write('Auth.User.level', 'student');                return $this->redirect($this->Auth->loginRedirect);            }else{                    $this->Session->setFlash("The username/password combination is incorrect.", 'default', array('class' => 'error'));                $this->redirect(array('controller' => 'students', 'action' => 'login'));            }        }            }            public function logout(){        return $this->redirect($this->Auth->logout());    }        public function dashboard(){        $this->layout = "student";        $student_data = $this->Student->findById($this->Auth->user('id'));        $student_future_courses = unserialize($student_data['Student']['f_schedule']);        $course_cart = array();        if(!empty($student_future_courses)){            $this->loadModel('Course');            $this->Course->recursive = -1;            foreach($student_future_courses as $course_catalog => $course_section){                $course_cart[] = $this->Course->find('first', array(                        'conditions' => array(                            'Course.catalog' => $course_catalog,                            'Course.section' => $course_section                        )                    ));            }        }        $this->set('future_courses', $course_cart);    }            public function deleteFromSchedule($course_catalog, $course_section){        $this->layout = "student";                $student_data = $this->Student->findById($this->Auth->user('id'));        $student_schedule = unserialize($student_data['Student']['f_schedule']);        $student_schedule = empty($student_schedule) ? array() : $student_schedule;                /* If the class with the same catalog and section exists in Student's schedule, delete it         * and decrement that course's counter.         */        if($student_schedule[$course_catalog] == $course_section){            // Delete that Course from student's schedule.            unset($student_schedule[$course_catalog]);            // Decrement Course Counter by 1.            $this->loadModel('Course');            $this->Course->updateAll(                array('Course.oc_capacity' => 'Course.oc_capacity - 1'),                array('Course.catalog' => $course_catalog, 'Course.section' => $course_section)            );            $this->Student->updateAll(                array('Student.f_schedule' => "'" . serialize($student_schedule) . "'"),                array('Student.id' => $this->Auth->user('id'))            );            // Notify by message.            $this->Session->setFlash("$course_catalog: Section $course_section has been succesfully deleted from your course cart.", 'default', array('class' => 'error'));            // Bring back from referer URL.            $this->redirect($this->referer());        }else{            // Bring back from referer URL.            $this->redirect($this->referer());        }    }    }?>